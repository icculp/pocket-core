// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/apps/apps.proto

package types

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	github_com_pokt_network_pocket_core_types "github.com/pokt-network/pocket-core/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Application defines the total amount of bond shares and their exchange rate to
// coins. Slashing results in a decrease in the exchange rate, allowing correct
// calculation of future undelegations without iterating over delegators.
// When coins are delegated to this validator, the validator is credited with a
// delegation whose number of bond shares is based on the amount of coins
// delegated divided by the current exchange rate. Voting power can be
// calculated as total bonded shares multiplied by exchange rate.
type ProtoApplication struct {
	Address                 github_com_pokt_network_pocket_core_types.Address     `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"address" yaml:"address"`
	PublicKey               []byte                                                `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key" yaml:"public_key"`
	Jailed                  bool                                                  `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed" yaml:"jailed"`
	Status                  github_com_pokt_network_pocket_core_types.StakeStatus `protobuf:"varint,4,opt,name=status,proto3,casttype=github.com/pokt-network/pocket-core/types.StakeStatus" json:"status" yaml:"status"`
	Chains                  []string                                              `protobuf:"bytes,5,rep,name=chains,proto3" json:"chains" yaml:"chains"`
	StakedTokens            github_com_pokt_network_pocket_core_types.BigInt      `protobuf:"bytes,6,opt,name=staked_tokens,json=stakedTokens,proto3,customtype=github.com/pokt-network/pocket-core/types.BigInt" json:"tokens" yaml:"tokens"`
	MaxRelays               github_com_pokt_network_pocket_core_types.BigInt      `protobuf:"bytes,7,opt,name=max_relays,json=maxRelays,proto3,customtype=github.com/pokt-network/pocket-core/types.BigInt" json:"max_relays" yaml:"max_relays"`
	UnstakingCompletionTime time.Time                                             `protobuf:"bytes,8,opt,name=unstaking_completion_time,json=unstakingCompletionTime,proto3,stdtime" json:"unstaking_time" yaml:"unstaking_time"`
}

func (m *ProtoApplication) Reset()         { *m = ProtoApplication{} }
func (m *ProtoApplication) String() string { return proto.CompactTextString(m) }
func (*ProtoApplication) ProtoMessage()    {}
func (*ProtoApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d5a21b1d350fd62, []int{0}
}
func (m *ProtoApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoApplication.Merge(m, src)
}
func (m *ProtoApplication) XXX_Size() int {
	return m.Size()
}
func (m *ProtoApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoApplication.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoApplication proto.InternalMessageInfo

// Pool - tracking bonded and not-bonded token supply of the bond denomination
type Pool struct {
	Tokens github_com_pokt_network_pocket_core_types.BigInt `protobuf:"bytes,1,opt,name=tokens,proto3,customtype=github.com/pokt-network/pocket-core/types.BigInt" json:"tokens"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d5a21b1d350fd62, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ProtoApplication)(nil), "x.apps.ProtoApplication")
	proto.RegisterType((*Pool)(nil), "x.apps.Pool")
}

func init() { proto.RegisterFile("x/apps/apps.proto", fileDescriptor_5d5a21b1d350fd62) }

var fileDescriptor_5d5a21b1d350fd62 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x18, 0xcd, 0xd1, 0xd6, 0x4d, 0x8e, 0xb6, 0xa2, 0x16, 0x08, 0x53, 0x24, 0x9f, 0x65, 0x16, 0x2f,
	0xb5, 0x81, 0x08, 0x09, 0x65, 0xab, 0x99, 0x80, 0x25, 0x72, 0x32, 0xc1, 0x10, 0x5d, 0x9c, 0xc3,
	0x35, 0xfe, 0x71, 0x56, 0x7c, 0x11, 0x09, 0x7f, 0x01, 0x12, 0x4b, 0xff, 0x84, 0xcc, 0xfc, 0x25,
	0x1d, 0x3b, 0x22, 0x86, 0x03, 0x25, 0x0b, 0xca, 0x84, 0x32, 0x32, 0xa1, 0xbb, 0x73, 0xea, 0xb2,
	0x45, 0xb0, 0x44, 0xf7, 0xde, 0x97, 0xf7, 0xde, 0x77, 0x9f, 0x3f, 0x1b, 0x1e, 0x4f, 0x3d, 0x5c,
	0x14, 0xa5, 0xfc, 0x71, 0x8b, 0x31, 0x65, 0x54, 0xd7, 0xa6, 0xae, 0x40, 0x27, 0x77, 0x23, 0x1a,
	0x51, 0x49, 0x79, 0xe2, 0xa4, 0xaa, 0x27, 0x28, 0xa2, 0x34, 0x4a, 0x89, 0x27, 0xd1, 0x70, 0xf2,
	0xce, 0x63, 0x71, 0x46, 0x4a, 0x86, 0xb3, 0x42, 0xfd, 0xc1, 0xfe, 0xa2, 0xc1, 0x3b, 0x5d, 0x71,
	0x3a, 0x2b, 0x8a, 0x34, 0x0e, 0x31, 0x8b, 0x69, 0xae, 0xa7, 0x70, 0x1f, 0x8f, 0x46, 0x63, 0x52,
	0x96, 0x06, 0xb0, 0x80, 0x73, 0xe0, 0x07, 0x2b, 0x8e, 0x36, 0xd4, 0x9a, 0xa3, 0xa3, 0x19, 0xce,
	0xd2, 0x8e, 0x5d, 0x11, 0xf6, 0x6f, 0x8e, 0x9e, 0x44, 0x31, 0x3b, 0x9f, 0x0c, 0xdd, 0x90, 0x66,
	0x5e, 0x41, 0x13, 0x76, 0x9a, 0x13, 0xf6, 0x81, 0x8e, 0x13, 0xaf, 0xa0, 0x61, 0x42, 0xd8, 0x69,
	0x48, 0xc7, 0xc4, 0x63, 0xb3, 0x82, 0x94, 0xee, 0x99, 0x52, 0x05, 0x1b, 0x3f, 0xdd, 0x87, 0xb0,
	0x98, 0x0c, 0xd3, 0x38, 0x1c, 0x24, 0x64, 0x66, 0xdc, 0x92, 0x81, 0x8f, 0x56, 0x1c, 0xdd, 0x60,
	0xd7, 0x1c, 0x1d, 0xab, 0xcc, 0x9a, 0xb3, 0x83, 0x96, 0x02, 0xaf, 0xc9, 0x4c, 0x6f, 0x43, 0xed,
	0x3d, 0x8e, 0x53, 0x32, 0x32, 0x76, 0x2c, 0xe0, 0x34, 0xfd, 0x87, 0x2b, 0x8e, 0x2a, 0x66, 0xcd,
	0xd1, 0xa1, 0xd2, 0x2a, 0x6c, 0x07, 0x55, 0x41, 0x4f, 0xa1, 0x56, 0x32, 0xcc, 0x26, 0xa5, 0xb1,
	0x6b, 0x01, 0x67, 0xcf, 0xef, 0x0b, 0x91, 0x62, 0x6a, 0x91, 0xc2, 0xe2, 0x8e, 0xcf, 0xb6, 0xbf,
	0x63, 0x8f, 0xe1, 0x84, 0xf4, 0xa4, 0x32, 0xa8, 0x1c, 0x45, 0x8b, 0xe1, 0x39, 0x8e, 0xf3, 0xd2,
	0xd8, 0xb3, 0x76, 0x9c, 0x96, 0x6a, 0x51, 0x31, 0x75, 0x9a, 0xc2, 0x76, 0x50, 0x15, 0xf4, 0x29,
	0x3c, 0x2c, 0x85, 0xd7, 0x68, 0xc0, 0x68, 0x42, 0xf2, 0xd2, 0xd0, 0x2c, 0xe0, 0xb4, 0xfc, 0xde,
	0x25, 0x47, 0x8d, 0x6f, 0x1c, 0x3d, 0xde, 0xbe, 0x25, 0x3f, 0x8e, 0x5e, 0xe6, 0x4c, 0x64, 0x2a,
	0xa7, 0x3a, 0x53, 0x61, 0x3b, 0x38, 0x50, 0x49, 0x7d, 0x09, 0xf5, 0x8f, 0x10, 0x66, 0x78, 0x3a,
	0x18, 0x93, 0x14, 0xcf, 0x4a, 0x63, 0x5f, 0xc6, 0xbe, 0xfd, 0x8f, 0xd8, 0x1b, 0x6e, 0xf5, 0xd3,
	0xac, 0x39, 0x3b, 0x68, 0x65, 0x78, 0x1a, 0xc8, 0xb3, 0xfe, 0x19, 0xc0, 0x07, 0x93, 0x5c, 0xb4,
	0x13, 0xe7, 0xd1, 0x20, 0xa4, 0x59, 0x91, 0x12, 0xb1, 0x98, 0x03, 0xb1, 0xbd, 0x46, 0xd3, 0x02,
	0xce, 0xed, 0xa7, 0x27, 0xae, 0x5a, 0x6d, 0x77, 0xb3, 0xda, 0x6e, 0x7f, 0xb3, 0xda, 0x7e, 0x5b,
	0xf4, 0xb9, 0xe2, 0xe8, 0xa8, 0x36, 0x11, 0xca, 0x35, 0x47, 0xf7, 0x54, 0xee, 0xdf, 0xbc, 0x7d,
	0xf1, 0x1d, 0x81, 0xe0, 0xfe, 0x35, 0xf9, 0xe2, 0x3a, 0x50, 0x58, 0x76, 0x9a, 0x9f, 0xe6, 0xa8,
	0xf1, 0x73, 0x8e, 0x80, 0x3d, 0x84, 0xbb, 0x5d, 0x4a, 0x53, 0xbd, 0x0b, 0xab, 0x21, 0xca, 0xd7,
	0xa3, 0xe5, 0x3f, 0xff, 0xd7, 0xb9, 0x04, 0x95, 0x4f, 0xa7, 0x29, 0xfc, 0x7f, 0xcd, 0x11, 0xf0,
	0x5f, 0x5d, 0x2e, 0x4c, 0x70, 0xb5, 0x30, 0xc1, 0x8f, 0x85, 0x09, 0x2e, 0x96, 0x66, 0xe3, 0x6a,
	0x69, 0x36, 0xbe, 0x2e, 0xcd, 0xc6, 0x9b, 0xad, 0xdc, 0xab, 0x0f, 0x84, 0x0c, 0x19, 0x6a, 0x72,
	0x36, 0xed, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0x85, 0x13, 0xd9, 0x37, 0x04, 0x00, 0x00,
}

func (this *Pool) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return AppsDescription()
}
func AppsDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4595 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0x5d, 0x70, 0x1b, 0xd7,
		0x75, 0x16, 0x40, 0x00, 0x04, 0x0e, 0x40, 0x70, 0xb9, 0xa4, 0x25, 0x88, 0x8e, 0x05, 0x19, 0xfe,
		0x11, 0x6d, 0xc7, 0x94, 0xab, 0x3f, 0xdb, 0x50, 0x13, 0x17, 0x20, 0x21, 0x86, 0x34, 0x7f, 0xe0,
		0x05, 0x19, 0xdb, 0xca, 0x64, 0x76, 0x2e, 0x17, 0x97, 0xe0, 0x8a, 0x8b, 0xdd, 0xcd, 0xee, 0x42,
		0x12, 0x35, 0x9d, 0x8e, 0x3b, 0x4e, 0xdb, 0x64, 0x3c, 0x6d, 0x9d, 0xb6, 0x33, 0x49, 0x5c, 0xdb,
		0x55, 0xdc, 0x69, 0xdd, 0xba, 0xbf, 0xe9, 0x4f, 0xd2, 0xb4, 0x2f, 0xe9, 0x74, 0xda, 0xfa, 0xa9,
		0x93, 0xbc, 0x75, 0xfa, 0xc0, 0x66, 0x6c, 0xcf, 0x34, 0x55, 0xdd, 0x36, 0x55, 0x95, 0x99, 0x4e,
		0xfd, 0x92, 0xb9, 0x7f, 0x8b, 0x5d, 0x00, 0xd4, 0x82, 0xce, 0xc8, 0x79, 0x91, 0xb0, 0xe7, 0x9e,
		0xef, 0xbb, 0xe7, 0x9e, 0x7b, 0xee, 0xb9, 0xe7, 0xde, 0x5d, 0xc2, 0xdf, 0x9d, 0x87, 0xe3, 0x2d,
		0xcb, 0x6a, 0x19, 0xf8, 0xa4, 0xed, 0x58, 0x9e, 0xb5, 0xd9, 0xd9, 0x3a, 0xd9, 0xc4, 0xae, 0xe6,
		0xe8, 0xb6, 0x67, 0x39, 0xb3, 0x54, 0x26, 0x8f, 0x33, 0x8d, 0x59, 0xa1, 0x51, 0x5a, 0x81, 0x89,
		0x0b, 0xba, 0x81, 0xe7, 0x7d, 0xc5, 0x06, 0xf6, 0xe4, 0x27, 0x20, 0xb1, 0xa5, 0x1b, 0xb8, 0x10,
		0x3b, 0x3e, 0x32, 0x93, 0x3d, 0x75, 0xff, 0x6c, 0x0f, 0x68, 0x36, 0x8c, 0xa8, 0x13, 0xb1, 0x42,
		0x11, 0xa5, 0xf7, 0x12, 0x30, 0x39, 0xa0, 0x55, 0x96, 0x21, 0x61, 0xa2, 0x36, 0x61, 0x8c, 0xcd,
		0x64, 0x14, 0xfa, 0x5b, 0x2e, 0xc0, 0xa8, 0x8d, 0xb4, 0x1d, 0xd4, 0xc2, 0x85, 0x38, 0x15, 0x8b,
		0x47, 0xf9, 0x18, 0x40, 0x13, 0xdb, 0xd8, 0x6c, 0x62, 0x53, 0xdb, 0x2d, 0x8c, 0x1c, 0x1f, 0x99,
		0xc9, 0x28, 0x01, 0x89, 0xfc, 0x08, 0x4c, 0xd8, 0x9d, 0x4d, 0x43, 0xd7, 0xd4, 0x80, 0x1a, 0x1c,
		0x1f, 0x99, 0x49, 0x2a, 0x12, 0x6b, 0x98, 0xef, 0x2a, 0x9f, 0x80, 0xf1, 0x2b, 0x18, 0xed, 0x04,
		0x55, 0xb3, 0x54, 0x35, 0x4f, 0xc4, 0x01, 0xc5, 0x39, 0xc8, 0xb5, 0xb1, 0xeb, 0xa2, 0x16, 0x56,
		0xbd, 0x5d, 0x1b, 0x17, 0x12, 0x74, 0xf4, 0xc7, 0xfb, 0x46, 0xdf, 0x3b, 0xf2, 0x2c, 0x47, 0xad,
		0xef, 0xda, 0x58, 0xae, 0x40, 0x06, 0x9b, 0x9d, 0x36, 0x63, 0x48, 0xee, 0xe3, 0xbf, 0x9a, 0xd9,
		0x69, 0xf7, 0xb2, 0xa4, 0x09, 0x8c, 0x53, 0x8c, 0xba, 0xd8, 0xb9, 0xac, 0x6b, 0xb8, 0x90, 0xa2,
		0x04, 0x27, 0xfa, 0x08, 0x1a, 0xac, 0xbd, 0x97, 0x43, 0xe0, 0xe4, 0x39, 0xc8, 0xe0, 0xab, 0x1e,
		0x36, 0x5d, 0xdd, 0x32, 0x0b, 0xa3, 0x94, 0xe4, 0x81, 0x01, 0xb3, 0x88, 0x8d, 0x66, 0x2f, 0x45,
		0x17, 0x27, 0x9f, 0x83, 0x51, 0xcb, 0xf6, 0x74, 0xcb, 0x74, 0x0b, 0xe9, 0xe3, 0xb1, 0x99, 0xec,
		0xa9, 0x8f, 0x0d, 0x0c, 0x84, 0x35, 0xa6, 0xa3, 0x08, 0x65, 0x79, 0x11, 0x24, 0xd7, 0xea, 0x38,
		0x1a, 0x56, 0x35, 0xab, 0x89, 0x55, 0xdd, 0xdc, 0xb2, 0x0a, 0x19, 0x4a, 0x50, 0xec, 0x1f, 0x08,
		0x55, 0x9c, 0xb3, 0x9a, 0x78, 0xd1, 0xdc, 0xb2, 0x94, 0xbc, 0x1b, 0x7a, 0x96, 0x0f, 0x43, 0xca,
		0xdd, 0x35, 0x3d, 0x74, 0xb5, 0x90, 0xa3, 0x11, 0xc2, 0x9f, 0x4a, 0xdf, 0x4a, 0xc1, 0xf8, 0x30,
		0x21, 0x76, 0x1e, 0x92, 0x5b, 0x64, 0x94, 0x85, 0xf8, 0x41, 0x7c, 0xc0, 0x30, 0x61, 0x27, 0xa6,
		0x3e, 0xa4, 0x13, 0x2b, 0x90, 0x35, 0xb1, 0xeb, 0xe1, 0x26, 0x8b, 0x88, 0x91, 0x21, 0x63, 0x0a,
		0x18, 0xa8, 0x3f, 0xa4, 0x12, 0x1f, 0x2a, 0xa4, 0x9e, 0x83, 0x71, 0xdf, 0x24, 0xd5, 0x41, 0x66,
		0x4b, 0xc4, 0xe6, 0xc9, 0x28, 0x4b, 0x66, 0x6b, 0x02, 0xa7, 0x10, 0x98, 0x92, 0xc7, 0xa1, 0x67,
		0x79, 0x1e, 0xc0, 0x32, 0xb1, 0xb5, 0xa5, 0x36, 0xb1, 0x66, 0x14, 0xd2, 0xfb, 0x78, 0x69, 0x8d,
		0xa8, 0xf4, 0x79, 0xc9, 0x62, 0x52, 0xcd, 0x90, 0x9f, 0xec, 0x86, 0xda, 0xe8, 0x3e, 0x91, 0xb2,
		0xc2, 0x16, 0x59, 0x5f, 0xb4, 0x6d, 0x40, 0xde, 0xc1, 0x24, 0xee, 0x71, 0x93, 0x8f, 0x2c, 0x43,
		0x8d, 0x98, 0x8d, 0x1c, 0x99, 0xc2, 0x61, 0x6c, 0x60, 0x63, 0x4e, 0xf0, 0x51, 0xbe, 0x0f, 0x7c,
		0x81, 0x4a, 0xc3, 0x0a, 0x68, 0x16, 0xca, 0x09, 0xe1, 0x2a, 0x6a, 0xe3, 0xe9, 0x6b, 0x90, 0x0f,
		0xbb, 0x47, 0x9e, 0x82, 0xa4, 0xeb, 0x21, 0xc7, 0xa3, 0x51, 0x98, 0x54, 0xd8, 0x83, 0x2c, 0xc1,
		0x08, 0x36, 0x9b, 0x34, 0xcb, 0x25, 0x15, 0xf2, 0x53, 0xfe, 0x99, 0xee, 0x80, 0x47, 0xe8, 0x80,
		0x1f, 0xec, 0x9f, 0xd1, 0x10, 0x73, 0xef, 0xb8, 0xa7, 0x1f, 0x87, 0xb1, 0xd0, 0x00, 0x86, 0xed,
		0xba, 0xf4, 0xb3, 0x70, 0xd7, 0x40, 0x6a, 0xf9, 0x39, 0x98, 0xea, 0x98, 0xba, 0xe9, 0x61, 0xc7,
		0x76, 0x30, 0x89, 0x58, 0xd6, 0x55, 0xe1, 0xdf, 0x46, 0xf7, 0x89, 0xb9, 0x8d, 0xa0, 0x36, 0x63,
		0x51, 0x26, 0x3b, 0xfd, 0xc2, 0x87, 0x33, 0xe9, 0xef, 0x8f, 0x4a, 0x2f, 0xbc, 0xf0, 0xc2, 0x0b,
		0xf1, 0xd2, 0xdf, 0xa6, 0x60, 0x6a, 0xd0, 0x9a, 0x19, 0xb8, 0x7c, 0x0f, 0x43, 0xca, 0xec, 0xb4,
		0x37, 0xb1, 0x43, 0x9d, 0x94, 0x54, 0xf8, 0x93, 0x5c, 0x81, 0xa4, 0x81, 0x36, 0xb1, 0x51, 0x48,
		0x1c, 0x8f, 0xcd, 0xe4, 0x4f, 0x3d, 0x32, 0xd4, 0xaa, 0x9c, 0x5d, 0x26, 0x10, 0x85, 0x21, 0xe5,
		0x4f, 0x42, 0x82, 0xa7, 0x68, 0xc2, 0xf0, 0xf0, 0x70, 0x0c, 0x64, 0x2d, 0x29, 0x14, 0x27, 0xdf,
		0x0d, 0x19, 0xf2, 0x3f, 0x8b, 0x8d, 0x14, 0xb5, 0x39, 0x4d, 0x04, 0x24, 0x2e, 0xe4, 0x69, 0x48,
		0xd3, 0x65, 0xd2, 0xc4, 0x62, 0x6b, 0xf3, 0x9f, 0x49, 0x60, 0x35, 0xf1, 0x16, 0xea, 0x18, 0x9e,
		0x7a, 0x19, 0x19, 0x1d, 0x4c, 0x03, 0x3e, 0xa3, 0xe4, 0xb8, 0xf0, 0xd3, 0x44, 0x26, 0x17, 0x21,
		0xcb, 0x56, 0x95, 0x6e, 0x36, 0xf1, 0x55, 0x9a, 0x3d, 0x93, 0x0a, 0x5b, 0x68, 0x8b, 0x44, 0x42,
		0xba, 0xbf, 0xe4, 0x5a, 0xa6, 0x08, 0x4d, 0xda, 0x05, 0x11, 0xd0, 0xee, 0x1f, 0xef, 0x4d, 0xdc,
		0xf7, 0x0c, 0x1e, 0x5e, 0xdf, 0x5a, 0x3a, 0x01, 0xe3, 0x54, 0xe3, 0x34, 0x9f, 0x7a, 0x64, 0x14,
		0x26, 0x8e, 0xc7, 0x66, 0xd2, 0x4a, 0x9e, 0x89, 0xd7, 0xb8, 0xb4, 0xf4, 0x8d, 0x38, 0x24, 0x68,
		0x62, 0x19, 0x87, 0xec, 0xfa, 0xf3, 0xf5, 0x9a, 0x3a, 0xbf, 0xb6, 0x51, 0x5d, 0xae, 0x49, 0x31,
		0x39, 0x0f, 0x40, 0x05, 0x17, 0x96, 0xd7, 0x2a, 0xeb, 0x52, 0xdc, 0x7f, 0x5e, 0x5c, 0x5d, 0x3f,
		0x77, 0x46, 0x1a, 0xf1, 0x01, 0x1b, 0x4c, 0x90, 0x08, 0x2a, 0x9c, 0x3e, 0x25, 0x25, 0x65, 0x09,
		0x72, 0x8c, 0x60, 0xf1, 0xb9, 0xda, 0xfc, 0xb9, 0x33, 0x52, 0x2a, 0x2c, 0x39, 0x7d, 0x4a, 0x1a,
		0x95, 0xc7, 0x20, 0x43, 0x25, 0xd5, 0xb5, 0xb5, 0x65, 0x29, 0xed, 0x73, 0x36, 0xd6, 0x95, 0xc5,
		0xd5, 0x05, 0x29, 0xe3, 0x73, 0x2e, 0x28, 0x6b, 0x1b, 0x75, 0x09, 0x7c, 0x86, 0x95, 0x5a, 0xa3,
		0x51, 0x59, 0xa8, 0x49, 0x59, 0x5f, 0xa3, 0xfa, 0xfc, 0x7a, 0xad, 0x21, 0xe5, 0x42, 0x66, 0x9d,
		0x3e, 0x25, 0x8d, 0xf9, 0x5d, 0xd4, 0x56, 0x37, 0x56, 0xa4, 0xbc, 0x3c, 0x01, 0x63, 0xac, 0x0b,
		0x61, 0xc4, 0x78, 0x8f, 0xe8, 0xdc, 0x19, 0x49, 0xea, 0x1a, 0xc2, 0x58, 0x26, 0x42, 0x82, 0x73,
		0x67, 0x24, 0xb9, 0x34, 0x07, 0x49, 0x1a, 0x86, 0xb2, 0x0c, 0xf9, 0xe5, 0x4a, 0xb5, 0xb6, 0xac,
		0xae, 0xd5, 0xd7, 0x17, 0xd7, 0x56, 0x2b, 0xcb, 0x52, 0xac, 0x2b, 0x53, 0x6a, 0xcf, 0x6c, 0x2c,
		0x2a, 0xb5, 0x79, 0x29, 0x1e, 0x94, 0xd5, 0x6b, 0x95, 0xf5, 0xda, 0xbc, 0x34, 0x52, 0xd2, 0x60,
		0x6a, 0x50, 0x42, 0x1d, 0xb8, 0x84, 0x02, 0xb1, 0x10, 0xdf, 0x27, 0x16, 0x28, 0x57, 0x6f, 0x2c,
		0x94, 0xde, 0x8d, 0xc3, 0xe4, 0x80, 0x4d, 0x65, 0x60, 0x27, 0x4f, 0x41, 0x92, 0xc5, 0x32, 0xdb,
		0x66, 0x1f, 0x1a, 0xb8, 0x3b, 0xd1, 0xc8, 0xee, 0xdb, 0x6a, 0x29, 0x2e, 0x58, 0x6a, 0x8c, 0xec,
		0x53, 0x6a, 0x10, 0x8a, 0xbe, 0x80, 0xfd, 0x6c, 0x5f, 0xf2, 0x67, 0xfb, 0xe3, 0xb9, 0x61, 0xf6,
		0x47, 0x2a, 0x3b, 0xd8, 0x26, 0x90, 0x1c, 0xb0, 0x09, 0x9c, 0x87, 0x89, 0x3e, 0xa2, 0xa1, 0x93,
		0xf1, 0x8b, 0x31, 0x28, 0xec, 0xe7, 0x9c, 0x88, 0x94, 0x18, 0x0f, 0xa5, 0xc4, 0xf3, 0xbd, 0x1e,
		0xbc, 0x77, 0xff, 0x49, 0xe8, 0x9b, 0xeb, 0x37, 0x63, 0x70, 0x78, 0x70, 0x49, 0x39, 0xd0, 0x86,
		0x4f, 0x42, 0xaa, 0x8d, 0xbd, 0x6d, 0x4b, 0x94, 0x55, 0x0f, 0x0e, 0xd8, 0xac, 0x49, 0x73, 0xef,
		0x64, 0x73, 0x54, 0x70, 0xb7, 0x1f, 0xd9, 0xaf, 0x2e, 0x64, 0xd6, 0xf4, 0x59, 0xfa, 0xc5, 0x38,
		0xdc, 0x35, 0x90, 0x7c, 0xa0, 0xa1, 0xf7, 0x00, 0xe8, 0xa6, 0xdd, 0xf1, 0x58, 0xe9, 0xc4, 0x32,
		0x71, 0x86, 0x4a, 0x68, 0xf2, 0x22, 0x59, 0xb6, 0xe3, 0xf9, 0xed, 0x23, 0xb4, 0x1d, 0x98, 0x88,
		0x2a, 0x3c, 0xd1, 0x35, 0x34, 0x41, 0x0d, 0x3d, 0xb6, 0xcf, 0x48, 0xfb, 0x02, 0xf3, 0x31, 0x90,
		0x34, 0x43, 0xc7, 0xa6, 0xa7, 0xba, 0x9e, 0x83, 0x51, 0x5b, 0x37, 0x5b, 0x74, 0xab, 0x49, 0x97,
		0x93, 0x5b, 0xc8, 0x70, 0xb1, 0x32, 0xce, 0x9a, 0x1b, 0xa2, 0x95, 0x20, 0x68, 0x00, 0x39, 0x01,
		0x44, 0x2a, 0x84, 0x60, 0xcd, 0x3e, 0xa2, 0xf4, 0xa5, 0x0c, 0x64, 0x03, 0x05, 0xb8, 0x7c, 0x2f,
		0xe4, 0x2e, 0xa1, 0xcb, 0x48, 0x15, 0x87, 0x2a, 0xe6, 0x89, 0x2c, 0x91, 0xd5, 0xf9, 0xc1, 0xea,
		0x31, 0x98, 0xa2, 0x2a, 0x56, 0xc7, 0xc3, 0x8e, 0xaa, 0x19, 0xc8, 0x75, 0xa9, 0xd3, 0xd2, 0x54,
		0x55, 0x26, 0x6d, 0x6b, 0xa4, 0x69, 0x4e, 0xb4, 0xc8, 0x67, 0x61, 0x92, 0x22, 0xda, 0x1d, 0xc3,
		0xd3, 0x6d, 0x03, 0xab, 0xe4, 0x98, 0xe7, 0xd2, 0x2d, 0xc7, 0xb7, 0x6c, 0x82, 0x68, 0xac, 0x70,
		0x05, 0x62, 0x91, 0x2b, 0xcf, 0xc3, 0x3d, 0x14, 0xd6, 0xc2, 0x26, 0x76, 0x90, 0x87, 0x55, 0xfc,
		0xb9, 0x0e, 0x32, 0x5c, 0x15, 0x99, 0x4d, 0x75, 0x1b, 0xb9, 0xdb, 0x85, 0x29, 0x42, 0x50, 0x8d,
		0x17, 0x62, 0xca, 0x51, 0xa2, 0xb8, 0xc0, 0xf5, 0x6a, 0x54, 0xad, 0x62, 0x36, 0x3f, 0x85, 0xdc,
		0x6d, 0xb9, 0x0c, 0x87, 0x29, 0x8b, 0xeb, 0x39, 0xba, 0xd9, 0x52, 0xb5, 0x6d, 0xac, 0xed, 0xa8,
		0x1d, 0x6f, 0xeb, 0x89, 0xc2, 0xdd, 0xc1, 0xfe, 0xa9, 0x85, 0x0d, 0xaa, 0x33, 0x47, 0x54, 0x36,
		0xbc, 0xad, 0x27, 0xe4, 0x06, 0xe4, 0xc8, 0x64, 0xb4, 0xf5, 0x6b, 0x58, 0xdd, 0xb2, 0x1c, 0xba,
		0x87, 0xe6, 0x07, 0xa4, 0xa6, 0x80, 0x07, 0x67, 0xd7, 0x38, 0x60, 0xc5, 0x6a, 0xe2, 0x72, 0xb2,
		0x51, 0xaf, 0xd5, 0xe6, 0x95, 0xac, 0x60, 0xb9, 0x60, 0x39, 0x24, 0xa0, 0x5a, 0x96, 0xef, 0xe0,
		0x2c, 0x0b, 0xa8, 0x96, 0x25, 0xdc, 0x7b, 0x16, 0x26, 0x35, 0x8d, 0x8d, 0x59, 0xd7, 0x54, 0x7e,
		0x18, 0x73, 0x0b, 0x52, 0xc8, 0x59, 0x9a, 0xb6, 0xc0, 0x14, 0x78, 0x8c, 0xbb, 0xf2, 0x93, 0x70,
		0x57, 0xd7, 0x59, 0x41, 0xe0, 0x44, 0xdf, 0x28, 0x7b, 0xa1, 0x67, 0x61, 0xd2, 0xde, 0xed, 0x07,
		0xca, 0xa1, 0x1e, 0xed, 0xdd, 0x5e, 0xd8, 0xe3, 0x30, 0x65, 0x6f, 0xdb, 0xfd, 0xb8, 0x87, 0x83,
		0x38, 0xd9, 0xde, 0xb6, 0x7b, 0x81, 0x0f, 0xd0, 0x93, 0xb9, 0x83, 0x35, 0xe4, 0xe1, 0x66, 0xe1,
		0x48, 0x50, 0x3d, 0xd0, 0x20, 0xcf, 0x82, 0xa4, 0x69, 0x2a, 0x36, 0xd1, 0xa6, 0x81, 0x55, 0xe4,
		0x60, 0x13, 0xb9, 0x85, 0x22, 0x55, 0x4e, 0x78, 0x4e, 0x07, 0x2b, 0x79, 0x4d, 0xab, 0xd1, 0xc6,
		0x0a, 0x6d, 0x93, 0x1f, 0x86, 0x09, 0x6b, 0xf3, 0x92, 0xc6, 0x22, 0x52, 0xb5, 0x1d, 0xbc, 0xa5,
		0x5f, 0x2d, 0xdc, 0x4f, 0xdd, 0x3b, 0x4e, 0x1a, 0x68, 0x3c, 0xd6, 0xa9, 0x58, 0x7e, 0x08, 0x24,
		0xcd, 0xdd, 0x46, 0x8e, 0x4d, 0x53, 0xb2, 0x6b, 0x23, 0x0d, 0x17, 0x1e, 0x60, 0xaa, 0x4c, 0xbe,
		0x2a, 0xc4, 0x64, 0x45, 0xb8, 0x57, 0xf4, 0x2d, 0x4f, 0x30, 0x9e, 0x60, 0x2b, 0x82, 0xca, 0x38,
		0xdb, 0x0c, 0x48, 0xc4, 0x13, 0xa1, 0x8e, 0x67, 0xa8, 0x5a, 0xde, 0xde, 0xb6, 0x83, 0xfd, 0xde,
		0x07, 0x63, 0x44, 0xb3, 0xdb, 0xe9, 0x43, 0xac, 0x70, 0xb3, 0xb7, 0x03, 0x3d, 0x9e, 0x81, 0xc3,
		0x44, 0xa9, 0x8d, 0x3d, 0xd4, 0x44, 0x1e, 0x0a, 0x68, 0x7f, 0x9c, 0x6a, 0x13, 0xb7, 0xaf, 0xf0,
		0xc6, 0x90, 0x9d, 0x4e, 0x67, 0x73, 0xd7, 0x0f, 0xac, 0x47, 0x99, 0x9d, 0x44, 0x26, 0x42, 0xeb,
		0x8e, 0x15, 0xe7, 0xa5, 0x32, 0xe4, 0x82, 0x71, 0x2f, 0x67, 0x80, 0x45, 0xbe, 0x14, 0x23, 0x45,
		0xd0, 0xdc, 0xda, 0x3c, 0x29, 0x5f, 0x2e, 0xd6, 0xa4, 0x38, 0x29, 0xa3, 0x96, 0x17, 0xd7, 0x6b,
		0xaa, 0xb2, 0xb1, 0xba, 0xbe, 0xb8, 0x52, 0x93, 0x46, 0x02, 0x85, 0xfd, 0x52, 0x22, 0xfd, 0xa0,
		0x74, 0x82, 0x54, 0x0d, 0xf9, 0xf0, 0x49, 0x4d, 0xfe, 0x69, 0x38, 0x22, 0xae, 0x55, 0x5c, 0xec,
		0xa9, 0x57, 0x74, 0x87, 0x2e, 0xc8, 0x36, 0x62, 0x9b, 0xa3, 0x1f, 0x3f, 0x53, 0x5c, 0xab, 0x81,
		0xbd, 0x67, 0x75, 0x87, 0x2c, 0xb7, 0x36, 0xf2, 0xe4, 0x65, 0x28, 0x9a, 0x96, 0xea, 0x7a, 0xc8,
		0x6c, 0x22, 0xa7, 0xa9, 0x76, 0x2f, 0xb4, 0x54, 0xa4, 0x69, 0xd8, 0x75, 0x2d, 0xb6, 0x11, 0xfa,
		0x2c, 0x1f, 0x33, 0xad, 0x06, 0x57, 0xee, 0xee, 0x10, 0x15, 0xae, 0xda, 0x13, 0xbe, 0x23, 0xfb,
		0x85, 0xef, 0xdd, 0x90, 0x69, 0x23, 0x5b, 0xc5, 0xa6, 0xe7, 0xec, 0xd2, 0xfa, 0x3c, 0xad, 0xa4,
		0xdb, 0xc8, 0xae, 0x91, 0xe7, 0x8f, 0xe4, 0x98, 0xb4, 0x94, 0x48, 0x27, 0xa4, 0xe4, 0x52, 0x22,
		0x9d, 0x94, 0x52, 0x4b, 0x89, 0x74, 0x4a, 0x1a, 0x5d, 0x4a, 0xa4, 0xd3, 0x52, 0x66, 0x29, 0x91,
		0xce, 0x48, 0x50, 0x7a, 0x67, 0x04, 0x72, 0xc1, 0x0a, 0x9e, 0x1c, 0x88, 0x34, 0xba, 0x87, 0xc5,
		0x68, 0x96, 0xbb, 0xef, 0xb6, 0xf5, 0xfe, 0xec, 0x1c, 0xd9, 0xdc, 0xca, 0x29, 0x56, 0x2e, 0x2b,
		0x0c, 0x49, 0x0a, 0x0b, 0x12, 0x7e, 0x98, 0x95, 0x27, 0x69, 0x85, 0x3f, 0xc9, 0x0b, 0x90, 0xba,
		0xe4, 0x52, 0xee, 0x14, 0xe5, 0xbe, 0xff, 0xf6, 0xdc, 0x4b, 0x0d, 0x4a, 0x9e, 0x59, 0x6a, 0xa8,
		0xab, 0x6b, 0xca, 0x4a, 0x65, 0x59, 0xe1, 0x70, 0xf9, 0x28, 0x24, 0x0c, 0x74, 0x6d, 0x37, 0xbc,
		0x0d, 0x52, 0xd1, 0xb0, 0xd3, 0x72, 0x14, 0x12, 0x57, 0x30, 0xda, 0x09, 0x6f, 0x3e, 0x54, 0x74,
		0x07, 0x97, 0xc7, 0x49, 0x48, 0x52, 0x7f, 0xc9, 0x00, 0xdc, 0x63, 0xd2, 0x21, 0x39, 0x0d, 0x89,
		0xb9, 0x35, 0x85, 0x2c, 0x11, 0x09, 0x72, 0x4c, 0xaa, 0xd6, 0x17, 0x6b, 0x73, 0x35, 0x29, 0x5e,
		0x3a, 0x0b, 0x29, 0xe6, 0x04, 0xb2, 0x7c, 0x7c, 0x37, 0x48, 0x87, 0xf8, 0x23, 0xe7, 0x88, 0x89,
		0xd6, 0x8d, 0x95, 0x6a, 0x4d, 0x91, 0xe2, 0x7d, 0x93, 0x5f, 0x72, 0x21, 0x17, 0xac, 0xcc, 0x3f,
		0x9a, 0xe3, 0xf9, 0xb7, 0x63, 0x90, 0x0d, 0x54, 0xda, 0xa4, 0x44, 0x42, 0x86, 0x61, 0x5d, 0x51,
		0x91, 0xa1, 0x23, 0x97, 0x87, 0x06, 0x50, 0x51, 0x85, 0x48, 0x86, 0x9d, 0xba, 0x8f, 0x68, 0xd1,
		0x24, 0xa5, 0x54, 0xe9, 0xf5, 0x18, 0x48, 0xbd, 0xa5, 0x6e, 0x8f, 0x99, 0xb1, 0x9f, 0xa4, 0x99,
		0xa5, 0x57, 0x63, 0x90, 0x0f, 0xd7, 0xb7, 0x3d, 0xe6, 0xdd, 0xfb, 0x13, 0x35, 0xef, 0x7b, 0x71,
		0x18, 0x0b, 0x55, 0xb5, 0xc3, 0x5a, 0xf7, 0x39, 0x98, 0xd0, 0x9b, 0xb8, 0x6d, 0x5b, 0x1e, 0x36,
		0xb5, 0x5d, 0xd5, 0xc0, 0x97, 0xb1, 0x51, 0x28, 0xd1, 0xa4, 0x71, 0xf2, 0xf6, 0x75, 0xf3, 0xec,
		0x62, 0x17, 0xb7, 0x4c, 0x60, 0xe5, 0xc9, 0xc5, 0xf9, 0xda, 0x4a, 0x7d, 0x6d, 0xbd, 0xb6, 0x3a,
		0xf7, 0xbc, 0xba, 0xb1, 0xfa, 0xf4, 0xea, 0xda, 0xb3, 0xab, 0x8a, 0xa4, 0xf7, 0xa8, 0xdd, 0xc1,
		0x65, 0x5f, 0x07, 0xa9, 0xd7, 0x28, 0xf9, 0x08, 0x0c, 0x32, 0x4b, 0x3a, 0x24, 0x4f, 0xc2, 0xf8,
		0xea, 0x9a, 0xda, 0x58, 0x9c, 0xaf, 0xa9, 0xb5, 0x0b, 0x17, 0x6a, 0x73, 0xeb, 0x0d, 0x76, 0x13,
		0xe2, 0x6b, 0xaf, 0x87, 0x16, 0x78, 0xe9, 0x95, 0x11, 0x98, 0x1c, 0x60, 0x89, 0x5c, 0xe1, 0x67,
		0x18, 0x76, 0xac, 0x7a, 0x74, 0x18, 0xeb, 0x67, 0x49, 0x15, 0x51, 0x47, 0x8e, 0xc7, 0x8f, 0x3c,
		0x0f, 0x01, 0xf1, 0x92, 0xe9, 0xe9, 0x5b, 0x3a, 0x76, 0xf8, 0x0d, 0x13, 0x3b, 0xd8, 0x8c, 0x77,
		0xe5, 0xec, 0x92, 0xe9, 0xe3, 0x20, 0xdb, 0x96, 0xab, 0x7b, 0xfa, 0x65, 0xac, 0xea, 0xa6, 0xb8,
		0x8e, 0x22, 0x07, 0x9d, 0x84, 0x22, 0x89, 0x96, 0x45, 0xd3, 0xf3, 0xb5, 0x4d, 0xdc, 0x42, 0x3d,
		0xda, 0x24, 0x99, 0x8f, 0x28, 0x92, 0x68, 0xf1, 0xb5, 0xef, 0x85, 0x5c, 0xd3, 0xea, 0x90, 0xea,
		0x8f, 0xe9, 0x91, 0xbd, 0x23, 0xa6, 0x64, 0x99, 0xcc, 0x57, 0xe1, 0x75, 0x7d, 0xf7, 0x1e, 0x2c,
		0xa7, 0x64, 0x99, 0x8c, 0xa9, 0x9c, 0x80, 0x71, 0xd4, 0x6a, 0x39, 0x84, 0x5c, 0x10, 0xb1, 0x93,
		0x4a, 0xde, 0x17, 0x53, 0xc5, 0xe9, 0x25, 0x48, 0x0b, 0x3f, 0x90, 0xcd, 0x9b, 0x78, 0x42, 0xb5,
		0xd9, 0xf1, 0x3b, 0x3e, 0x93, 0x51, 0xd2, 0xa6, 0x68, 0xbc, 0x17, 0x72, 0xba, 0xab, 0x76, 0xaf,
		0xf5, 0xe3, 0xc7, 0xe3, 0x33, 0x69, 0x25, 0xab, 0xbb, 0xfe, 0x95, 0x68, 0xe9, 0xcd, 0x38, 0xe4,
		0xc3, 0xaf, 0x25, 0xe4, 0x79, 0x48, 0x1b, 0x96, 0x86, 0x68, 0x68, 0xb1, 0x77, 0x62, 0x33, 0x11,
		0x6f, 0x32, 0x66, 0x97, 0xb9, 0xbe, 0xe2, 0x23, 0xa7, 0xff, 0x29, 0x06, 0x69, 0x21, 0x96, 0x0f,
		0x43, 0xc2, 0x46, 0xde, 0x36, 0xa5, 0x4b, 0x56, 0xe3, 0x52, 0x4c, 0xa1, 0xcf, 0x44, 0xee, 0xda,
		0xc8, 0xa4, 0x21, 0xc0, 0xe5, 0xe4, 0x99, 0xcc, 0xab, 0x81, 0x51, 0x93, 0x1e, 0x83, 0xac, 0x76,
		0x1b, 0x9b, 0x9e, 0x2b, 0xe6, 0x95, 0xcb, 0xe7, 0xb8, 0x58, 0x7e, 0x04, 0x26, 0x3c, 0x07, 0xe9,
		0x46, 0x48, 0x37, 0x41, 0x75, 0x25, 0xd1, 0xe0, 0x2b, 0x97, 0xe1, 0xa8, 0xe0, 0x6d, 0x62, 0x0f,
		0x69, 0xdb, 0xb8, 0xd9, 0x05, 0xa5, 0xe8, 0x75, 0xc7, 0x11, 0xae, 0x30, 0xcf, 0xdb, 0x05, 0xb6,
		0xf4, 0xdd, 0x18, 0x4c, 0x88, 0x83, 0x5b, 0xd3, 0x77, 0xd6, 0x0a, 0x00, 0x32, 0x4d, 0xcb, 0x0b,
		0xba, 0xab, 0x3f, 0x94, 0xfb, 0x70, 0xb3, 0x15, 0x1f, 0xa4, 0x04, 0x08, 0xa6, 0xdb, 0x00, 0xdd,
		0x96, 0x7d, 0xdd, 0x56, 0x84, 0x2c, 0x7f, 0xe7, 0x44, 0x5f, 0x5c, 0xb2, 0xa3, 0x3e, 0x30, 0x11,
		0x39, 0xe1, 0xc9, 0x53, 0x90, 0xdc, 0xc4, 0x2d, 0xdd, 0xe4, 0x37, 0xc9, 0xec, 0x41, 0x5c, 0xc8,
		0x24, 0xfc, 0x0b, 0x99, 0xea, 0xcf, 0xc1, 0xa4, 0x66, 0xb5, 0x7b, 0xcd, 0xad, 0x4a, 0x3d, 0xd7,
		0x0d, 0xee, 0xa7, 0x62, 0x17, 0x1f, 0xe5, 0x4a, 0x2d, 0xcb, 0x40, 0x66, 0x6b, 0xd6, 0x72, 0x5a,
		0xdd, 0x17, 0xaf, 0xa4, 0xe2, 0x71, 0x03, 0xaf, 0x5f, 0xed, 0xcd, 0xff, 0x8b, 0xc5, 0xde, 0x88,
		0x8f, 0x2c, 0xd4, 0xab, 0x6f, 0xc5, 0xa7, 0x17, 0x18, 0xb0, 0x2e, 0x9c, 0xa1, 0xe0, 0x2d, 0x03,
		0x6b, 0x64, 0x80, 0x70, 0xe3, 0x11, 0x98, 0x6a, 0x59, 0x2d, 0x8b, 0x32, 0x9d, 0x24, 0xbf, 0xf8,
		0x9b, 0xdb, 0x8c, 0x2f, 0x9d, 0x8e, 0x7c, 0xcd, 0x5b, 0x5e, 0x85, 0x49, 0xae, 0xac, 0xd2, 0x57,
		0x47, 0xec, 0x60, 0x23, 0xdf, 0xf6, 0x56, 0xad, 0xf0, 0xf5, 0xf7, 0xe8, 0xf6, 0xad, 0x4c, 0x70,
		0x28, 0x69, 0x63, 0x67, 0x9f, 0xb2, 0x02, 0x77, 0x85, 0xf8, 0xd8, 0x22, 0xc5, 0x4e, 0x04, 0xe3,
		0xdf, 0x73, 0xc6, 0xc9, 0x00, 0x63, 0x83, 0x43, 0xcb, 0x73, 0x30, 0x76, 0x10, 0xae, 0x7f, 0xe0,
		0x5c, 0x39, 0x1c, 0x24, 0x59, 0x80, 0x71, 0x4a, 0xa2, 0x75, 0x5c, 0xcf, 0x6a, 0xd3, 0x0c, 0x78,
		0x7b, 0x9a, 0x7f, 0x7c, 0x8f, 0xad, 0x9a, 0x3c, 0x81, 0xcd, 0xf9, 0xa8, 0x72, 0x19, 0xe8, 0xdb,
		0xb2, 0x26, 0xd6, 0x8c, 0x08, 0x86, 0xb7, 0xb9, 0x21, 0xbe, 0x7e, 0xf9, 0xd3, 0x30, 0x45, 0x7e,
		0xd3, 0x04, 0x15, 0xb4, 0x24, 0xfa, 0x0a, 0xae, 0xf0, 0xdd, 0x17, 0xd9, 0xc2, 0x9c, 0xf4, 0x09,
		0x02, 0x36, 0x05, 0x66, 0xb1, 0x85, 0x3d, 0x0f, 0x3b, 0xae, 0x8a, 0x8c, 0x41, 0xe6, 0x05, 0xee,
		0x30, 0x0a, 0x5f, 0x7d, 0x3f, 0x3c, 0x8b, 0x0b, 0x0c, 0x59, 0x31, 0x8c, 0xf2, 0x06, 0x1c, 0x19,
		0x10, 0x15, 0x43, 0x70, 0xbe, 0xc2, 0x39, 0xa7, 0xfa, 0x22, 0x83, 0xd0, 0xd6, 0x41, 0xc8, 0xfd,
		0xb9, 0x1c, 0x82, 0xf3, 0x37, 0x39, 0xa7, 0xcc, 0xb1, 0x62, 0x4a, 0x09, 0xe3, 0x12, 0x4c, 0x5c,
		0xc6, 0xce, 0xa6, 0xe5, 0xf2, 0x7b, 0xa3, 0x21, 0xe8, 0x5e, 0xe5, 0x74, 0xe3, 0x1c, 0x48, 0x2f,
		0x92, 0x08, 0xd7, 0x93, 0x90, 0xde, 0x42, 0x1a, 0x1e, 0x82, 0xe2, 0x35, 0x4e, 0x31, 0x4a, 0xf4,
		0x09, 0xb4, 0x02, 0xb9, 0x96, 0xc5, 0xf7, 0xa8, 0x68, 0xf8, 0xeb, 0x1c, 0x9e, 0x15, 0x18, 0x4e,
		0x61, 0x5b, 0x76, 0xc7, 0x20, 0x1b, 0x58, 0x34, 0xc5, 0x6f, 0x09, 0x0a, 0x81, 0xe1, 0x14, 0x07,
		0x70, 0xeb, 0x75, 0x41, 0xe1, 0x06, 0xfc, 0xf9, 0x14, 0x64, 0x2d, 0xd3, 0xd8, 0xb5, 0xcc, 0x61,
		0x8c, 0xf8, 0x1a, 0x67, 0x00, 0x0e, 0x21, 0x04, 0xe7, 0x21, 0x33, 0xec, 0x44, 0xfc, 0xce, 0xfb,
		0x62, 0x79, 0x88, 0x19, 0x58, 0x80, 0x71, 0x91, 0xa0, 0x74, 0xcb, 0x1c, 0x82, 0xe2, 0x77, 0x39,
		0x45, 0x3e, 0x00, 0xe3, 0xc3, 0xf0, 0xb0, 0xeb, 0xb5, 0xf0, 0x30, 0x24, 0x6f, 0x8a, 0x61, 0x70,
		0x08, 0x77, 0xe5, 0x26, 0x36, 0xb5, 0xed, 0xe1, 0x18, 0x7e, 0x4f, 0xb8, 0x52, 0x60, 0x08, 0xc5,
		0x1c, 0x8c, 0xb5, 0x91, 0xe3, 0x6e, 0x23, 0x63, 0xa8, 0xe9, 0xf8, 0x7d, 0xce, 0x91, 0xf3, 0x41,
		0xdc, 0x23, 0x1d, 0xf3, 0x20, 0x34, 0x6f, 0x09, 0x8f, 0x04, 0x60, 0x7c, 0xe9, 0xb9, 0x1e, 0xbd,
		0x64, 0x3b, 0x08, 0xdb, 0x1f, 0x88, 0xa5, 0xc7, 0xb0, 0x2b, 0x41, 0xc6, 0xf3, 0x90, 0x71, 0xf5,
		0x6b, 0x43, 0xd1, 0xfc, 0xa1, 0x98, 0x69, 0x0a, 0x20, 0xe0, 0xe7, 0xe1, 0xe8, 0xc0, 0x6d, 0x62,
		0x08, 0xb2, 0x3f, 0xe2, 0x64, 0x87, 0x07, 0x6c, 0x15, 0x3c, 0x25, 0x1c, 0x94, 0xf2, 0x8f, 0x45,
		0x4a, 0xc0, 0x3d, 0x5c, 0x75, 0x72, 0x6a, 0x70, 0xd1, 0xd6, 0xc1, 0xbc, 0xf6, 0x27, 0xc2, 0x6b,
		0x0c, 0x1b, 0xf2, 0xda, 0x3a, 0x1c, 0xe6, 0x8c, 0x07, 0x9b, 0xd7, 0x3f, 0x15, 0x89, 0x95, 0xa1,
		0x37, 0xc2, 0xb3, 0xfb, 0x19, 0x98, 0xf6, 0xdd, 0x29, 0xca, 0x53, 0x57, 0x6d, 0x23, 0x7b, 0x08,
		0xe6, 0xaf, 0x73, 0x66, 0x91, 0xf1, 0xfd, 0xfa, 0xd6, 0x5d, 0x41, 0x36, 0x21, 0x7f, 0x0e, 0x0a,
		0x82, 0xbc, 0x63, 0x3a, 0x58, 0xb3, 0x5a, 0xa6, 0x7e, 0x0d, 0x37, 0x87, 0xa0, 0xfe, 0xb3, 0x9e,
		0xa9, 0xda, 0x08, 0xc0, 0x09, 0xf3, 0x22, 0x48, 0x7e, 0xad, 0xa2, 0xea, 0x6d, 0xdb, 0x72, 0xbc,
		0x08, 0xc6, 0x3f, 0x17, 0x33, 0xe5, 0xe3, 0x16, 0x29, 0xac, 0x5c, 0x03, 0xf6, 0xe6, 0x79, 0xd8,
		0x90, 0xfc, 0x0b, 0x4e, 0x34, 0xd6, 0x45, 0xf1, 0xc4, 0xa1, 0x59, 0x6d, 0x1b, 0x39, 0xc3, 0xe4,
		0xbf, 0xbf, 0x14, 0x89, 0x83, 0x43, 0x78, 0xe2, 0x20, 0x15, 0x1d, 0xd9, 0xed, 0x87, 0x60, 0xf8,
		0x86, 0x48, 0x1c, 0x02, 0xc3, 0x29, 0x44, 0xc1, 0x30, 0x04, 0xc5, 0x37, 0x05, 0x85, 0xc0, 0x10,
		0x8a, 0x67, 0xba, 0x1b, 0xad, 0x83, 0x5b, 0xba, 0xeb, 0x39, 0xac, 0x28, 0xbe, 0x3d, 0xd5, 0x5f,
		0xbd, 0x1f, 0x2e, 0xc2, 0x94, 0x00, 0x94, 0x64, 0x22, 0x7e, 0xed, 0x4a, 0xcf, 0x4c, 0xd1, 0x86,
		0x7d, 0x4b, 0x64, 0xa2, 0x00, 0x8c, 0xd8, 0x16, 0xa8, 0x10, 0x89, 0xdb, 0x35, 0x72, 0x52, 0x18,
		0x82, 0xee, 0xaf, 0x7b, 0x8c, 0x6b, 0x08, 0x2c, 0xe1, 0x0c, 0xd4, 0x3f, 0x1d, 0x73, 0x07, 0xef,
		0x0e, 0x15, 0x9d, 0x7f, 0xd3, 0x53, 0xff, 0x6c, 0x30, 0x24, 0xcb, 0x21, 0xe3, 0x3d, 0xf5, 0x94,
		0x1c, 0xf5, 0x9d, 0x51, 0xe1, 0xe7, 0x6f, 0xf1, 0xf1, 0x86, 0xcb, 0xa9, 0xf2, 0x32, 0x09, 0xf2,
		0x70, 0xd1, 0x13, 0x4d, 0xf6, 0xe2, 0x2d, 0x3f, 0xce, 0x43, 0x35, 0x4f, 0xf9, 0x02, 0x8c, 0x85,
		0x0a, 0x9e, 0x68, 0xaa, 0xcf, 0x73, 0xaa, 0x5c, 0xb0, 0xde, 0x29, 0x9f, 0x85, 0x04, 0x29, 0x5e,
		0xa2, 0xe1, 0xbf, 0xc0, 0xe1, 0x54, 0xbd, 0xfc, 0x09, 0x48, 0x8b, 0xa2, 0x25, 0x1a, 0xfa, 0x8b,
		0x1c, 0xea, 0x43, 0x08, 0x5c, 0x14, 0x2c, 0xd1, 0xf0, 0x5f, 0x12, 0x70, 0x01, 0x21, 0xf0, 0xe1,
		0x5d, 0xf8, 0xed, 0x97, 0x12, 0x7c, 0xd3, 0x11, 0xbe, 0x3b, 0x0f, 0xa3, 0xbc, 0x52, 0x89, 0x46,
		0x7f, 0x91, 0x77, 0x2e, 0x10, 0xe5, 0xc7, 0x21, 0x39, 0xa4, 0xc3, 0x7f, 0x99, 0x43, 0x99, 0x7e,
		0x79, 0x0e, 0xb2, 0x81, 0xea, 0x24, 0x1a, 0xfe, 0x2b, 0x1c, 0x1e, 0x44, 0x11, 0xd3, 0x79, 0x75,
		0x12, 0x4d, 0xf0, 0xab, 0xc2, 0x74, 0x8e, 0x20, 0x6e, 0x13, 0x85, 0x49, 0x34, 0xfa, 0x65, 0xe1,
		0x75, 0x01, 0x29, 0x3f, 0x05, 0x19, 0x7f, 0xb3, 0x89, 0xc6, 0x7f, 0x89, 0xe3, 0xbb, 0x18, 0xe2,
		0x81, 0xc0, 0x66, 0x17, 0x4d, 0xf1, 0x6b, 0xc2, 0x03, 0x01, 0x14, 0x59, 0x46, 0xbd, 0x05, 0x4c,
		0x34, 0xd3, 0xaf, 0x8b, 0x65, 0xd4, 0x53, 0xbf, 0x90, 0xd9, 0xa4, 0x39, 0x3f, 0x9a, 0xe2, 0x37,
		0xc4, 0x6c, 0x52, 0x7d, 0x62, 0x46, 0x6f, 0x45, 0x10, 0xcd, 0xf1, 0x65, 0x61, 0x46, 0x4f, 0x41,
		0x50, 0xae, 0x83, 0xdc, 0x5f, 0x0d, 0x44, 0xf3, 0x7d, 0x85, 0xf3, 0x4d, 0xf4, 0x15, 0x03, 0xe5,
		0x67, 0xe1, 0xf0, 0xe0, 0x4a, 0x20, 0x9a, 0xf5, 0xab, 0xb7, 0x7a, 0xce, 0x6e, 0xc1, 0x42, 0xa0,
		0xbc, 0xde, 0xdd, 0x52, 0x82, 0x55, 0x40, 0x34, 0xed, 0x2b, 0xb7, 0xc2, 0x89, 0x3b, 0x58, 0x04,
		0x94, 0x2b, 0x00, 0xdd, 0x0d, 0x38, 0x9a, 0xeb, 0x55, 0xce, 0x15, 0x00, 0x91, 0xa5, 0xc1, 0xf7,
		0xdf, 0x68, 0xfc, 0x6b, 0x62, 0x69, 0x70, 0x04, 0x59, 0x1a, 0x62, 0xeb, 0x8d, 0x46, 0xbf, 0x2e,
		0x96, 0x86, 0x80, 0x90, 0xc8, 0x0e, 0xec, 0x6e, 0xd1, 0x0c, 0x5f, 0x13, 0x91, 0x1d, 0x40, 0x95,
		0x57, 0x61, 0xa2, 0x6f, 0x43, 0x8c, 0xa6, 0x7a, 0x83, 0x53, 0x49, 0xbd, 0xfb, 0x61, 0x70, 0xf3,
		0xe2, 0x9b, 0x61, 0x34, 0xdb, 0x6f, 0xf7, 0x6c, 0x5e, 0x7c, 0x2f, 0x2c, 0x9f, 0x87, 0xb4, 0xd9,
		0x31, 0x0c, 0xb2, 0x78, 0xe4, 0xdb, 0x7f, 0x1b, 0x58, 0xf8, 0xf7, 0x0f, 0xb8, 0x77, 0x04, 0xa0,
		0x7c, 0x16, 0x92, 0xb8, 0xbd, 0x89, 0x9b, 0x51, 0xc8, 0x1b, 0x1f, 0x88, 0x84, 0x49, 0xb4, 0xcb,
		0x4f, 0x01, 0xb0, 0xab, 0x11, 0xfa, 0x32, 0x30, 0x02, 0xfb, 0x1f, 0x1f, 0xf0, 0x8f, 0x71, 0xba,
		0x90, 0x2e, 0x01, 0xfb, 0xb4, 0xe7, 0xf6, 0x04, 0xef, 0x87, 0x09, 0xe8, 0x8c, 0x3c, 0x09, 0xa3,
		0x97, 0x5c, 0xcb, 0xf4, 0x50, 0x2b, 0x0a, 0xfd, 0x9f, 0x1c, 0x2d, 0xf4, 0x89, 0xc3, 0xda, 0x96,
		0x83, 0x3d, 0xd4, 0x72, 0xa3, 0xb0, 0xff, 0xc5, 0xb1, 0x3e, 0x80, 0x80, 0x35, 0xe4, 0x7a, 0xc3,
		0x8c, 0xfb, 0xbf, 0x05, 0x58, 0x00, 0x88, 0xd1, 0xe4, 0xf7, 0x0e, 0xde, 0x8d, 0xc2, 0xfe, 0x40,
		0x18, 0xcd, 0xf5, 0xcb, 0x9f, 0x80, 0x0c, 0xf9, 0xc9, 0xbe, 0xb0, 0x8b, 0x00, 0xff, 0x0f, 0x07,
		0x77, 0x11, 0xa4, 0x67, 0xd7, 0x6b, 0x7a, 0x7a, 0xb4, 0xb3, 0x6f, 0xf2, 0x99, 0x16, 0xfa, 0xe5,
		0x0a, 0x64, 0x5d, 0xaf, 0xd9, 0xec, 0xf0, 0xfa, 0x34, 0x02, 0xfe, 0xbf, 0x1f, 0xf8, 0x57, 0x16,
		0x3e, 0x86, 0xcc, 0xf6, 0x95, 0x1d, 0xcf, 0xb6, 0xe8, 0x0b, 0x8f, 0x28, 0x86, 0x5b, 0x9c, 0x21,
		0x00, 0x29, 0xcf, 0x41, 0x8e, 0x8c, 0xc5, 0xc1, 0x36, 0xa6, 0x6f, 0xa7, 0x22, 0x28, 0x7e, 0xc8,
		0x1d, 0x10, 0x02, 0x55, 0x3f, 0xfb, 0xf6, 0x3b, 0xc7, 0x62, 0xdf, 0x79, 0xe7, 0x58, 0xec, 0x7b,
		0xef, 0x1c, 0x8b, 0xbd, 0xfc, 0xee, 0xb1, 0x43, 0xdf, 0x79, 0xf7, 0xd8, 0xa1, 0x7f, 0x7e, 0xf7,
		0xd8, 0xa1, 0xc1, 0xb7, 0xc4, 0xb0, 0x60, 0x2d, 0x58, 0xec, 0x7e, 0xf8, 0x62, 0xa9, 0xa5, 0x7b,
		0xdb, 0x9d, 0xcd, 0x59, 0xcd, 0x6a, 0xd3, 0x6b, 0xdc, 0xee, 0x6d, 0xad, 0x7f, 0xc8, 0x81, 0x2f,
		0xc7, 0xa1, 0xd8, 0x7b, 0x97, 0x4b, 0x1c, 0xe8, 0x7a, 0xa8, 0x6d, 0xef, 0xf7, 0x17, 0x3b, 0xe7,
		0x21, 0xb3, 0x2e, 0x74, 0xe4, 0x02, 0x8c, 0xba, 0x58, 0xb3, 0xcc, 0xa6, 0x4b, 0x5f, 0x6a, 0x8e,
		0x28, 0xe2, 0x51, 0x9e, 0x82, 0xa4, 0x89, 0x4c, 0xcb, 0xe5, 0xdf, 0x09, 0xb2, 0x87, 0xea, 0x6b,
		0xb1, 0x83, 0x8d, 0x28, 0xef, 0x77, 0x45, 0x87, 0x55, 0x8f, 0x5d, 0x3c, 0x15, 0x79, 0xeb, 0xbd,
		0x63, 0x5a, 0x57, 0xcc, 0xee, 0x38, 0x42, 0x57, 0xdf, 0xc7, 0x7a, 0xaf, 0xbe, 0x9f, 0xc5, 0x86,
		0xf1, 0x34, 0x01, 0xac, 0x13, 0xec, 0x66, 0x8a, 0x7d, 0x68, 0x0c, 0xdf, 0x4c, 0xc3, 0xc4, 0xd5,
		0x93, 0xc8, 0xb6, 0x5d, 0xfa, 0x0f, 0xf7, 0x45, 0xea, 0xea, 0x2c, 0x79, 0x9a, 0x1e, 0x78, 0x43,
		0x3e, 0x1d, 0xe5, 0xca, 0xd2, 0x5b, 0x29, 0x90, 0x68, 0xc7, 0x15, 0xdb, 0x36, 0x74, 0xfe, 0x22,
		0xc6, 0x80, 0x51, 0xd4, 0x6c, 0x3a, 0xd8, 0x65, 0x1e, 0xcc, 0x55, 0x95, 0x1b, 0x7b, 0x45, 0x21,
		0xba, 0xb9, 0x57, 0xcc, 0xef, 0xa2, 0xb6, 0x51, 0x2e, 0x71, 0x41, 0xe9, 0xff, 0xf7, 0x8a, 0x3f,
		0x15, 0x98, 0x59, 0xdb, 0xda, 0xf1, 0x1e, 0x35, 0xb1, 0x77, 0xc5, 0x72, 0x76, 0x4e, 0xda, 0x96,
		0xb6, 0x83, 0xbd, 0x47, 0x35, 0xcb, 0xc1, 0xcc, 0x15, 0xb3, 0x15, 0x86, 0x52, 0x04, 0x9f, 0x5c,
		0x05, 0xe0, 0x7f, 0xb9, 0xb4, 0x83, 0x77, 0xe9, 0xd4, 0xe4, 0xaa, 0xf7, 0xdd, 0xd8, 0x2b, 0x06,
		0xa4, 0x37, 0xf7, 0x8a, 0x13, 0xac, 0xcf, 0xae, 0xac, 0xa4, 0x64, 0xd8, 0xc3, 0xd3, 0x78, 0x57,
		0x3e, 0x0d, 0xa9, 0x4b, 0x48, 0x37, 0xc4, 0xeb, 0xf6, 0xea, 0xdd, 0x37, 0xf6, 0x8a, 0x5c, 0x72,
		0x73, 0xaf, 0x38, 0xc6, 0xb0, 0xec, 0xb9, 0xa4, 0xf0, 0x06, 0xd9, 0x80, 0x94, 0xeb, 0x21, 0xaf,
		0xc3, 0xde, 0x04, 0x25, 0xab, 0xeb, 0x04, 0xc4, 0x24, 0x5d, 0x10, 0x7b, 0x26, 0x63, 0x3c, 0x3b,
		0xfc, 0x18, 0x1b, 0x1e, 0xda, 0xc1, 0x0d, 0x8a, 0x54, 0x38, 0x23, 0x31, 0x51, 0xdb, 0x46, 0xba,
		0xe9, 0xb2, 0x2f, 0x66, 0x99, 0x89, 0x4c, 0xd2, 0xed, 0x8d, 0x3d, 0x97, 0x14, 0xde, 0x20, 0x5f,
		0x85, 0x31, 0x97, 0x70, 0x35, 0x55, 0xcf, 0xda, 0xc1, 0xa6, 0xcb, 0x3e, 0xab, 0xaf, 0x36, 0xde,
		0xde, 0x2b, 0x1e, 0xfa, 0x97, 0xbd, 0xe2, 0x63, 0xc3, 0x9b, 0x54, 0xd5, 0x5b, 0x8b, 0xa6, 0x47,
		0xfa, 0x64, 0x4c, 0xdd, 0x3e, 0xd9, 0x73, 0x49, 0xc9, 0xb1, 0x9e, 0xd6, 0xe9, 0xa3, 0x7c, 0x0d,
		0xa0, 0x8d, 0xae, 0xaa, 0x0e, 0x36, 0xd0, 0x2e, 0xfb, 0x0b, 0x94, 0x4c, 0xf5, 0x33, 0x3f, 0x46,
		0xb7, 0x01, 0xb6, 0xee, 0x6c, 0x76, 0x65, 0x25, 0x52, 0x46, 0x5f, 0x55, 0xe8, 0x6f, 0xf9, 0xa5,
		0x18, 0x1c, 0xed, 0x98, 0xc4, 0x1c, 0xfe, 0xbe, 0xce, 0x36, 0x30, 0xbd, 0x27, 0x25, 0xd1, 0xcb,
		0xbf, 0xdf, 0x9f, 0xee, 0xcb, 0x5d, 0xfe, 0xb2, 0xac, 0x9e, 0x26, 0x76, 0xde, 0xd8, 0x2b, 0xe6,
		0xbb, 0x24, 0x04, 0x79, 0x73, 0xaf, 0x78, 0x17, 0xeb, 0x37, 0x2c, 0x2f, 0xbd, 0xfc, 0xaf, 0xc5,
		0x98, 0x72, 0xc4, 0x17, 0xce, 0xf9, 0x1d, 0x12, 0xca, 0x72, 0xfa, 0x0b, 0xd7, 0x8b, 0x87, 0xbe,
		0x7f, 0xbd, 0x18, 0x2b, 0x6d, 0x42, 0xa2, 0x6e, 0x59, 0x86, 0x5c, 0x07, 0xee, 0x44, 0xf6, 0x3d,
		0x69, 0xf5, 0x89, 0x0f, 0xeb, 0x17, 0x85, 0xf3, 0x94, 0xd3, 0x84, 0xff, 0x07, 0xd7, 0x8b, 0xb1,
		0xea, 0xd2, 0x7e, 0xc9, 0xe8, 0xe2, 0x50, 0xec, 0x3c, 0x41, 0x78, 0xe1, 0xcc, 0x91, 0x04, 0x89,
		0x37, 0xb4, 0xdd, 0xd6, 0x30, 0x89, 0xa3, 0xf4, 0xc3, 0x18, 0x8c, 0xad, 0xb8, 0xad, 0x3a, 0x3b,
		0x92, 0xa3, 0x1d, 0x2c, 0x9f, 0x81, 0x51, 0xbb, 0xb3, 0x49, 0xd7, 0x28, 0x4b, 0x0a, 0x34, 0x80,
		0xed, 0xce, 0x26, 0x5b, 0x9f, 0x63, 0xfe, 0xfa, 0xa4, 0x6b, 0x93, 0x34, 0xf0, 0x85, 0xc9, 0xa3,
		0x3e, 0x3e, 0x7c, 0xd4, 0xb7, 0xc4, 0xb7, 0xf3, 0x74, 0xff, 0xa9, 0x3e, 0xf3, 0x63, 0x84, 0x1d,
		0x23, 0xba, 0xb9, 0x57, 0xcc, 0xb1, 0xae, 0xe8, 0x63, 0x89, 0x7f, 0x63, 0x5f, 0x96, 0xc8, 0xd4,
		0x7e, 0xe5, 0x7a, 0x31, 0x46, 0xdc, 0xff, 0x85, 0x37, 0x8a, 0xb1, 0xd2, 0x5b, 0x31, 0x18, 0x5f,
		0x71, 0x5b, 0x55, 0xdc, 0xd2, 0xcd, 0x0d, 0x1a, 0x10, 0x58, 0xfe, 0x7c, 0x0c, 0x46, 0x2b, 0xa1,
		0x7c, 0x78, 0xe9, 0xc6, 0x5e, 0x71, 0x12, 0x75, 0x33, 0xa6, 0xda, 0xcd, 0x8d, 0xd3, 0x3c, 0x37,
		0xf6, 0x37, 0x7e, 0xd8, 0x3c, 0xc9, 0x7f, 0x0c, 0x30, 0xf6, 0xa5, 0x18, 0x64, 0x56, 0xdc, 0xd6,
		0x86, 0x49, 0x12, 0x1a, 0xc9, 0xda, 0x15, 0xdb, 0x26, 0xda, 0x77, 0x32, 0x6b, 0xf3, 0x2e, 0xfa,
		0xad, 0xb9, 0x13, 0x91, 0xfb, 0xa3, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x4c, 0xa5, 0xb8, 0xc1,
		0x3b, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *ProtoApplication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoApplication)
	if !ok {
		that2, ok := that.(ProtoApplication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Chains) != len(that1.Chains) {
		return false
	}
	for i := range this.Chains {
		if this.Chains[i] != that1.Chains[i] {
			return false
		}
	}
	if !this.StakedTokens.Equal(that1.StakedTokens) {
		return false
	}
	if !this.MaxRelays.Equal(that1.MaxRelays) {
		return false
	}
	if !this.UnstakingCompletionTime.Equal(that1.UnstakingCompletionTime) {
		return false
	}
	return true
}
func (this *Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tokens.Equal(that1.Tokens) {
		return false
	}
	return true
}
func (m *ProtoApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnstakingCompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintApps(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	{
		size := m.MaxRelays.Size()
		i -= size
		if _, err := m.MaxRelays.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApps(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.StakedTokens.Size()
		i -= size
		if _, err := m.StakedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApps(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintApps(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintApps(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintApps(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApps(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApps(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintApps(dAtA []byte, offset int, v uint64) int {
	offset -= sovApps(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProtoApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApps(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovApps(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovApps(uint64(m.Status))
	}
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovApps(uint64(l))
		}
	}
	l = m.StakedTokens.Size()
	n += 1 + l + sovApps(uint64(l))
	l = m.MaxRelays.Size()
	n += 1 + l + sovApps(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime)
	n += 1 + l + sovApps(uint64(l))
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tokens.Size()
	n += 1 + l + sovApps(uint64(l))
	return n
}

func sovApps(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApps(x uint64) (n int) {
	return sovApps(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtoApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= github_com_pokt_network_pocket_core_types.StakeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRelays", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRelays.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnstakingCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApps
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApps
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApps(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApps
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApps
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApps
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApps
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApps        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApps          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApps = fmt.Errorf("proto: unexpected end of group")
)
